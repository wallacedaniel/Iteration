/*

TABLES
https://www.webadvanced.com/news/painless-responsive-tables

colorpicker
https://mdbootstrap.com/plugins/jquery/color-picker/

colors
https://www.sessions.edu/color-calculator/




        My work to as many people as possible as quickly as possible
        
            Twitter Bot > Node/Express/P5
            
                random generator of iteration object that matches the options of the interface generates with bounds/options based on design templates
                
                iteration 
                
                    properties
                        
                    methods
                    
                    
                
                -add jquery
                    
                
            




















   // Iteration Logo Colors
    color1 = color(164,247,191);
    color4 = color(0,176,185);
    color2 = lerpColor(color1, color4, 0.33);
    color3 = lerpColor(color1, color4, 0.66);
    colors = [];



Iteration Plans

As a capstone project and learning path focus for Lyca -> Semantics UI 
As a capstone project for other intermediate develelopment positions -> JS course 
As a creative business endeavour -> site development - icons style() content() > hire out (table - content()) > design and product over tool development

icons
iterate now
iterate ui as is
semantic ui
js correct

Dev ID plans

My page - 


    
    
 






let x;
let y;
let ellipseW;

function setup() {
    createCanvas(1000, 400);

    x = 300;
    y = 200;
    ellipseW = 10;
}


function draw() {
    
    background(125);

    ellipse(mouseX, mouseY, ellipseW, 50);
    
    ellipseW = ellipseW + 1;
    
    /*
    if( x > 1000  ){
        x = x - 3;  
    }
    
    if( x < 0  ){
      x = x + 3;  
    }
    */

}







































let bug; // Declare object

function setup() {
  createCanvas(710, 400);
  // Create object
  bug = new Jitter();
}

function draw() {
  background(50, 89, 100);
  bug.move();
  bug.display();
}

// Jitter class
class Jitter {
  constructor() {
    this.x = random(width);
    this.y = random(height);
    this.diameter = random(10, 30);
    this.speed = 1;
  }

  move() {
    this.x += random(-this.speed, this.speed);
    this.y += random(-this.speed, this.speed);
  }

  display() {
    ellipse(this.x, this.y, this.diameter, this.diameter);
  }
}



let bug1; // Declare objects
let bug2;
let bug3;
let bug4;

function setup() {
  createCanvas(710, 400);
  // Create object
  bug1 = new Jitter();
  bug2 = new Jitter();
  bug3 = new Jitter();
  bug4 = new Jitter();
}

function draw() {
  background(50, 89, 100);
  bug1.move();
  bug1.display();
  bug2.move();
  bug2.display();
  bug3.move();
  bug3.display();
  bug4.move();
  bug4.display();
}

// Jitter class
class Jitter {
  constructor() {
    this.x = random(width);
    this.y = random(height);
    this.diameter = random(10, 30);
    this.speed = 1;
  }

  move() {
    this.x += random(-this.speed, this.speed);
    this.y += random(-this.speed, this.speed);
  }

  display() {
    ellipse(this.x, this.y, this.diameter, this.diameter);
  }
}



let bugs = []; // array of Jitter objects

function setup() {
  createCanvas(2600, 40000);
  // Create objects
  for (let i = 0; i < 50; i++) {
    bugs.push(new Jitter());
  }
}

function draw() {
  background(50, 89, 100);
  for (let i = 0; i < bugs.length; i++) {
    bugs[i].move();
    bugs[i].display();
  }
}

// Jitter class
class Jitter {
  constructor() {
    this.x = random(width);
    this.y = random(height);
    this.diameter = random(10, 30);
    this.speed = 1;
  }

  move() {
    this.x += random(-this.speed, this.speed);
    this.y += random(-this.speed, this.speed);
  }

  display() {
    ellipse(this.x, this.y, this.diameter, this.diameter);
  }
}
*/
/*
class Canvas {
  constructor() {
    this.W;
    this.H;
    this.coordinates;
  }
}


class Canvas {

  int W;
  int H;
  ArrayList<int[]> coordinates;
  
  // Random Grid Canvas constrained by bounds square option
  Canvas(float[] bounds, boolean square){
    // Gets all possible grid ratios
    IntList[] canvasD = createGrids(bounds[0], bounds[1], bounds[2], bounds[3]);
    int[] gridD = new int[2];
    //...selects random pair...    
    if(square == true) {
      gridD = getSquares(canvasD);
    }
    else {
      gridD = getDimensions(canvasD);      
    }  
    //... sets W and H
    this.W = gridD[0];
    this.H = gridD[1];
    
    // Creates array of grid coordinates
    ArrayList<int[]> coordinatesArray = new ArrayList<int[]>();
    
    for (int x = 0; x <= width; x += W) {
      for (int y = 0; y < height + H; y += H) {
        
        //creates cell coordinates [top L x, top L y, center x, center y]
        int[] newCoordinates = new int[4];
        newCoordinates[0] = x;
        newCoordinates[1] = y;
        newCoordinates[2] = x + W/2;
        newCoordinates[3] = y + H/2;
        coordinatesArray.add(newCoordinates);
      }
    }
    this.coordinates = coordinatesArray;
  }
  
   // random point between where and where - [4]xMin xMax yMin yMax
   Canvas(float[] coordBounds, int qty){
     
     ArrayList<int[]> coordinatesArray = new ArrayList<int[]>();
     
     for(int i = 0; i < qty; i++){
       int[] newCoordinates = new int[2];
       int x = int(random(coordBounds[0],coordBounds[1]+1));
       int y = int(random(coordBounds[2],coordBounds[3]+1));
        newCoordinates[0] = x;
        newCoordinates[1] = y;
        coordinatesArray.add(newCoordinates);
     }
     this.coordinates = coordinatesArray;
   }
   
   Canvas(){
       
     ArrayList<int[]> coordinatesArray = new ArrayList<int[]>();
     
       int[] newCoordinates = new int[]{0,0}; 
       coordinatesArray.add(newCoordinates);
       newCoordinates = new int[]{0,width};
       coordinatesArray.add(newCoordinates);
       newCoordinates = new int[]{width,height};
       coordinatesArray.add(newCoordinates);
       newCoordinates = new int[]{0,height};
       coordinatesArray.add(newCoordinates);
       newCoordinates = new int[]{width/2,height/2};
       coordinatesArray.add(newCoordinates);// levels * + ?        
       this.coordinates = coordinatesArray; 
   }
   
// returns two IntList[]'s of all evenly divisible Widths and Heights for Canvas - constrained by Upper and Lower Bounds
  IntList[] createGrids(float innerWBound, float outerWBound, float innerHBound, float outerHBound) {
    IntList[] canvasD = new IntList[2];
    IntList widthDivs = new IntList();
    for(int i = 1;i <= width;i++){
      
      if(width%i == 0 && i >= (width * innerWBound) && i <= (width * outerWBound)){
        widthDivs.append(i);
      }
    }
    IntList heightDivs = new IntList();
    for(int i = 1;i <= height;i++){
      if(height%i == 0 && i >= (height * innerHBound) && i <= (height * outerHBound)){
        heightDivs.append(i);
      }
    }
    canvasD[0] = widthDivs;
    canvasD[1] = heightDivs;
    return canvasD;
  }
  
  // Returns random W and H values for grid                 
  int[] getDimensions(IntList[] canvasD){
    int[] gridD = new int[2];
    int indexW = floor(random(0,canvasD[0].maxIndex()));
    int indexH = floor(random(0,canvasD[1].maxIndex()));
    gridD[0] = canvasD[0].get(indexW);
    gridD[1] = canvasD[1].get(indexH);
    return gridD;
  }
  
  // Returns random W and H values for grid - constrained to squares
  int[] getSquares(IntList[] canvasD){
  
    IntList commonDimensions = new IntList();  
    int[] gridD = new int[2];  
    
    for(int i = 0; i < canvasD[0].size(); i++){      
      if(canvasD[1].hasValue(canvasD[0].get(i))){ 
        
        commonDimensions.append(canvasD[0].get(i));
      }     
    }
    int squareIndex = int(random(0, commonDimensions.size()));
    gridD[0] = commonDimensions.get(squareIndex);
    gridD[1] = gridD[0];
    return gridD;
  }
}

*/























































/*


let r1, r2, r3, r4;

function setup() {
  createCanvas(710, 400);
  fill(255, 204);
  noStroke();
  r1 = new MRect(1, 134.0, 0.532, 0.1 * height, 10.0, 60.0);
  r2 = new MRect(2, 44.0, 0.166, 0.3 * height, 5.0, 50.0);
  r3 = new MRect(2, 58.0, 0.332, 0.4 * height, 10.0, 35.0);
  r4 = new MRect(1, 120.0, 0.0498, 0.9 * height, 15.0, 60.0);
}

function draw() {
  background(0);

  r1.display();
  r2.display();
  r3.display();
  r4.display();

  r1.move(mouseX - width / 2, mouseY + height * 0.1, 30);
  r2.move((mouseX + width * 0.05) % width, mouseY + height * 0.025, 20);
  r3.move(mouseX / 4, mouseY - height * 0.025, 40);
  r4.move(mouseX - width / 2, height - mouseY, 50);
}

class MRect {
  constructor(iw, ixp, ih, iyp, id, it) {
    this.w = iw; // single bar width
    this.xpos = ixp; // rect xposition
    this.h = ih; // rect height
    this.ypos = iyp; // rect yposition
    this.d = id; // single bar distance
    this.t = it; // number of bars
  }

  move(posX, posY, damping) {
    let dif = this.ypos - posY;
    if (abs(dif) > 1) {
      this.ypos -= dif / damping;
    }
    dif = this.xpos - posX;
    if (abs(dif) > 1) {
      this.xpos -= dif / damping;
    }
  }

  display() {
    for (let i = 0; i < this.t; i++) {
      rect(
        this.xpos + i * (this.d + this.w),
        this.ypos,
        this.w,
        height * this.h
      );
    }
  }
}






























// add center points
// add lines
// checkbox grid elements
// start button


let canvas;
let slider;
let W;
let H;

function setup() {
    //noStroke();
    //noFill();
    strokeWeight(20);
    stroke(255);
    createCanvas(600, 400);
    
    
    W = 10;
    H = 10;
    
    
    sliderX = createSlider(0, 100, W, W);     //  <<<< 2 of the same args
    sliderY = createSlider(0, 100, H, H);
    
    canvas = new Canvas(W, H);   //  <<< Naming ? canvas? grid?
    
    // canvas height / width variables  
    // sliders and grid to initial values
 
}


function draw() {
    canvas.update();
    canvas.display();  
}


// Canvas class
class Canvas {
  constructor(W, H) {
    this.W = W;
    this.H = H;
    this.coordinates = getCoordinates(this.W, this.H); 
    this.rows = getRows(); 
    this.columns = getColumns();                        //    how to draw shapes after ?   // If not shape()  no p5 shape()??  off of loop through coords  if x == 0 / y == 0 and for all
    this.cells = getCells(); 
  }

  update() {
    let tempW = this.W; 
    let tempH = this.H; 
      
    this.W = sliderX.value(); // this -  needs to be out of  the loop >>  up into htlm input >> interactive?   different
    this.H = sliderY.value(); 
      
    if(tempW != this.W || tempH != this.H){
        this.coordinates = getCoordinates(this.W, this.H);      
    }  
  }

  display() {
    background(255);
    /*
    for(let i = 0; i < this.coordinates.length; i++){
        point(this.coordinates[i][0], this.coordinates[i][1]);         
    }
    for(let row in this.rows){
        shape(row);         
    }
    for(let column in this.columns){
        shape(column);         
    }
    */
    for(let cell in this.cells){
        rect(cell);         
    }
  }
}

//   As OBJECT so can use names   and separate out for iteration   <<<<<<<<<      row column cell point   + mid points       

function getCoordinates(W, H){        // need canvas size var
 
    let newCoordinates = [];
    
    for (let x = 0; x <= 600; x += W) {       //  <<<<<<<<
        for (let y = 0; y <= 400; y += H) { 
            let coordPair = [];
            coordPair[0] = x;
            coordPair[1] = y;
            newCoordinates.push(coordPair); 
        }
    }
    return newCoordinates;  
  }


function getRows(){        // need canvas size var
    /*
    let newRows = [];
    
    for (let x = 0; x <= 600; x += W) {       //  <<<<<<<<
        for (let y = 0; y <= 400; y += H) { 
            let coordPair = [];
            coordPair[0] = x;
            coordPair[1] = y;

            if(x == 0){
                let newRow = rect(x, y, 600, H);    //   <<<<<<<<
                newRows.push(newRow);
            }
        }
    }
    return newRows;  
    */
    
    
    for(let coordPair in this.coordinates){
        console.log(coordPair);   
    }
    
    
    
    
    
    
    
}


function getColumns(){        // need canvas size var

    let newColumns = [];

    for (let x = 0; x <= 600; x += W) {       //  <<<<<<<<
        for (let y = 0; y <= 400; y += H) { 
            let coordPair = [];
            coordPair[0] = x;
            coordPair[1] = y;

            if(y == 0){
                let newColumn = rect(x, y, W, 400);
                newColumns.push(newColumn);
            }
            
        }
    }
    return newColumns;  
}

function getCells(){        // need canvas size var

    let newCells = [];

    for (let x = 0; x <= 600; x += W) {       //  <<<<<<<<
        for (let y = 0; y <= 400; y += H) { 
            let coordPair = [];
            coordPair[0] = x;
            coordPair[1] = y;

            let newCell = rect(x, y, W, H); 
            newCells.push(newCell); 
        }
    }
    return newCells;
}





//var newCanvas = document.getElementById("mycanvas");  // by type
//var img    = newCanvas.toDataURL("iteration/png");
//document.write('<img src="'+img+'"/>');
































































*/



let slider;

function setup() {
  createCanvas(400, 400);
  slider = createSlider(0, 10, 2, 0.01);
}

function draw() {
  background(51);
  translate(width / 2, height / 2);

  let a = 100;
  let b = 100;
  let n = slider.value();
  stroke(255);
  noFill();

  beginShape();
  for (let angle = 0; angle < TWO_PI; angle += 0.1) {
    // Simple ellipse
    // let x = r * cos(angle);
    // let y = r * sin(angle);

    // Superellipse
    let na = 2 / n;
    let x = pow(abs(cos(angle)), na) * a * sgn(cos(angle));
    let y = pow(abs(sin(angle)), na) * b * sgn(sin(angle));
    vertex(x, y);
  }
  endShape(CLOSE);
}

function sgn(val) {
  if (val == 0) {
    return 0;
  }
  return val / abs(val);
}




































































//   x1 x2 x3 x4 vars
//re orient diamonds
//contrast enforcement  >   function

//curve lines  for these we could use all the points of  the hor/vert lines  -- ....
// get Goordinates out of canvas

//reset canvas size
// option to enforce eveness
// random within bounds

//change palette
//shapes+
//gradient

//really fix diamonds

//3d city  -  random camera

//CE320F
//DDC58D

// String axis = "Y";
   //setGradient(0, 0, width, height, lastColor, firstColor, axis);

/*
void setGradient(int x, int y, float w, float h, color c1, color c2, String axis) {

function setGradient(x, y, fw, h, c1, c2, axis) {

  noFill();

  if (axis == "Y") {  // Top to bottom gradient
    for (let i = y; i <= y+h; i++) {
      let inter = map(i, y, y+h, 0, 1);
      let c = lerpColor(c1, c2, inter);                  <<<<<<<leprColor ?
      stroke(c);
      line(x, i, x+w, i);
    }
  }  
  else if (axis == "X") {  // Left to right gradient
    for (let i = x; i <= x+w; i++) {
      let inter = map(i, x, x+w, 0, 1);
      let c = lerpColor(c1, c2, inter);
      stroke(c);
      line(i, y, i, y+h);
    }
  }
}
*/

let canvas, W, H, c1, c2, dimensions, strokeW, newFill, colorIndex, colorHolder, firstDraw, canvasButton;

function setup() {
    noLoop();
    noStroke();
    noFill();
    firstDraw = 1;
    
    //createCanvas(800, 800, WEBGL);
    createCanvas(800, 800);
    W = createInput(80);  // as % of starting canvas
    H = createInput(80);
    strokeW = createInput(2);  // H * .05
    
    dimensions = randomDimensions(); 
    //canvas = new Canvas(dimensions[0], dimensions[1]);
    //canvas = new Canvas(W.value(), H.value());
     canvas = new Canvas(40, 80);   
    
    
    canvasButton = createButton("New Canvas");
    canvasButton.mousePressed(canvas.getCoordinates);
    
    strokeWeight(strokeW.value());
    c1 = color(random(255), random(255), random(255));
    c2 = color(random(255), random(255), random(255));
    
    palette = new Palette(c1, c2);
    colorHolder = 0;
}

function draw() {
    canvas.update();
    palette.update();
    canvas.display();  
    

}

class Canvas {
  constructor(W, H) {
    this.W = W;
    this.H = H;
    this.rows = []; 
    this.columns = [];                        
    this.cells = []; 
    this.coordinates = this.getCoordinates(); 
  }

    update() {
        
    }

    display() {
        background(255);    
        stroke(palette.colors[int(random(0,palette.colors.length))]);     
        
        for(let i = 0; i < this.coordinates.length; i++){
            //stroke(random(255), random(255), random(255));
            //point(this.coordinates[i][0], this.coordinates[i][1]);
        }

        for(let i = 0; i < this.rows.length; i++){
            
            // horizontal stripe  
            //fill(random(255), random(255), random(255));
            
          /*
          colorIndex = int(random(0,palette.colors.length)); 
          while(abs(colorIndex - colorHolder) < 2){
             colorIndex = int(random(0,palette.colors.length));   
           }  
          newFill = palette.colors[colorIndex];
          colorHolder = colorIndex;
          fill(newFill);
            */

            //rect(canvas.rows[i][0], canvas.rows[i][1], canvas.rows[i][2], canvas.rows[i][3]);
            
            // horizontal line           
            //stroke(2);
            //stroke(random(255), random(255), random(255));
            //line(this.rows[i][0], this.rows[i][1], width, this.rows[i][1]);
        }
        for(let i = 0; i < this.columns.length; i++){
            
            // vertical stripe
            //fill(random(255), random(255), random(255));
            /*
            
          colorIndex = int(random(0,palette.colors.length)); 
          while(abs(colorIndex - colorHolder) < 2){
             colorIndex = int(random(0,palette.colors.length));   
           }  
          newFill = palette.colors[colorIndex];
          colorHolder = colorIndex;
          fill(newFill);
          
            rect(canvas.columns[i][0], canvas.columns[i][1], canvas.columns[i][2], canvas.columns[i][3]); 
            */
            // vertical line
            //stroke(2);
            //stroke(random(255), random(255), random(255));
            //line(this.columns[i][0], this.columns[i][1], this.columns[i][0], height);
            

            //line(this.columns[i][0], this.columns[i][1], this.columns[i][1], height);
            
        }
     
        let lineCount = 1;
        let lineCount2 = height/canvas.H;
        for(let i = 0; i < canvas.cells.length; i++){
            
            //let colorIndex = ;
            //fill(palette.colors[int(random(0,palette.colors.length))]);
            
            //rect(canvas.cells[i][0], canvas.cells[i][1], canvas.cells[i][2], canvas.cells[i][3]);  
            //drawTiledTris(canvas.cells[i], canvas.W, canvas.H);
            
            //Diamond
            //quad(this.cells[i][0] + this.cells[i][2]/2, this.cells[i][1], this.cells[i][0] + this.cells[i][2], this.cells[i][1] + this.cells[i][3]/2, this.cells[i][0] + this.cells[i][2]/2, this.cells[i][1] + this.cells[i][3],  this.cells[i][0], this.cells[i][1] + this.cells[i][3]/2);
            
            //point(this.coordinates[i][2], this.coordinates[i][3]);
            

              //polygon(canvas.coordinates[i][2], canvas.coordinates[i][3], canvas.W/2, floor(random(3,11)));

              //star(canvas.coordinates[i][2], canvas.coordinates[i][3], canvas.W/4, canvas.W/2, floor(random(3,11)));
            

            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
  
            /*

            let a = canvas.W/2;
            let b = canvas.H/2;
            let n = random(0.3,5);
               
            push();
            translate(canvas.coordinates[i][2], canvas.coordinates[i][3]);
            superEllipse(a, b, n);  
            
            a = canvas.W/2;
            b = canvas.H/2;
            n = random(0.3,5);
            
            
            superEllipse(a, b, n); 
            pop();

            */

         /*
            // Diagonals(alt)
            if(canvas.cells[i][1] == 0){
                line(canvas.cells[i][0], canvas.cells[i][1], canvas.cells[i][0] + (canvas.W * (height/canvas.H)), height);
                line(canvas.cells[i][0], canvas.cells[i][1], canvas.cells[i][0] - (canvas.W * (height/canvas.H)), height);
            }
            if(canvas.cells[i][0] == 0 && !(canvas.cells[i][0] == 0 && canvas.cells[i][1] == 0)){
                line(canvas.cells[i][0], canvas.cells[i][1], canvas.W * ((height/canvas.H) - lineCount), height);
                lineCount += 1;
            } 
            // theres a doubled up line in here 
            if(canvas.cells[i][0] == width &&){ 
                line(canvas.cells[i][0], canvas.cells[i][1], width - (canvas.W * lineCount2), height);
                lineCount2--; 
            }
        
            // Diagonals
            if(canvas.cells[i][1] == 0){
                line(canvas.cells[i][0], canvas.cells[i][1], canvas.cells[i][0] + (canvas.W * (height/canvas.H)), height);
                line(canvas.cells[i][0], canvas.cells[i][1], canvas.cells[i][0] - (canvas.W * (height/canvas.H)), height);
            }
            if(canvas.cells[i][0] == 0 && !(canvas.cells[i][0] == 0 && canvas.cells[i][1] == 0)){
                line(canvas.cells[i][0], canvas.cells[i][1], canvas.W * ((height/canvas.H) - lineCount), height);
                lineCount += 1;
            } 
            // theres a doubled up line in here 
            if(canvas.cells[i][0] == width){ 
                line(canvas.cells[i][0], canvas.cells[i][1], width - (canvas.W * lineCount2), height);
                lineCount2--; 
            } 
            
            */
             
            //sphere and cubes
            /*
              //noStroke();
              //fill(50);
              noFill();
              push();
              translate(canvas.coordinates[i][2], canvas.coordinates[i][3]);
              //rotateY(1.25);
              //rotateX(-0.9);
              box(canvas.W * .9);
              pop();

              noFill();
              push();
              translate(canvas.coordinates[i][2], canvas.coordinates[i][3]);
              sphere(canvas.W/2);
              pop();

            */
            
        }    
    }

    getCoordinates(){        

        let newCoordinates = [];
        
        if(canvas){
            canvas.W = int(W.value());
            canvas.H = int(H.value());
            this.W = int(W.value());
            this.H = int(H.value());
            canvas.coordinates = [];
            canvas.rows = [];
            canvas.columns = [];
            canvas.cells = [];
        }


        for (let x = 0; x <= width; x += this.W) {  
            for (let y = 0; y <= height; y += this.H) {
                
                let coords = [];
                coords[0] = x;
                coords[1] = y;
                if(canvas){
                    coords[2] = x + canvas.W/2; 
                    coords[3] = y + canvas.H/2;
                } else {
                    coords[2] = x + this.W/2; 
                    coords[3] = y + this.H/2;   
                }
                newCoordinates.push(coords);
                
                let newCell = [];
                newCell[0] = x;
                newCell[1] = y;
                if(canvas){
                    newCell[2] = canvas.W;
                    newCell[3] = canvas.H;                  
                    canvas.cells.push(newCell); 
                } else {
                    newCell[2] = this.W;
                    newCell[3] = this.H;
                    this.cells.push(newCell); 
                }   
                
                if(x == 0){
                    let newRow = [];
                    newRow[0] = x;
                    newRow[1] = y;
                    newRow[2] = width; 
                    if(canvas){
                        newRow[3] = canvas.H;
                        canvas.rows.push(newRow); 
                    } else {
                        newRow[3] = this.H;
                        this.rows.push(newRow); 
                    }
                }
                if(y == 0){ 
                    let newColumn = [];
                    newColumn[0] = x;
                    newColumn[1] = y;
                    newColumn[3] = height;
                    if(canvas){ 
                        newColumn[2] = canvas.W;                      
                        canvas.columns.push(newColumn); 
                    } else {
                        newColumn[2] = this.W;
                        this.columns.push(newColumn); 
                    }
                }
            }
        }
        //console.log(newCoordinates);
        if(canvas){
            canvas.coordinates = newCoordinates;
            // in here because of button push ... gather elsewhere?
            palette.update();
            //console.log('New Coords');
        } else {
            return newCoordinates;     
        }
         
    }   
}

class Palette {  
    
    constructor(color1, color2) {
        this.colors = this.getColors(color1, color2);
    }

    getColors(color1, color2){       
    
        let newColors = [];
        newColors[0] = color1;
        for(let i = 1; i < 10; i++){
            newColors[i] = lerpColor(color1, color2, i * .1);    
        }
        newColors[10] = color2;
        return newColors;
    }  
    
    update(){
        strokeWeight(strokeW.value());
    }
}

function randomDimensions(){ 
    
    let wOptions = []
    let hOptions = []
     for(let i = 1; i <= width; i++){
      // && i >= (width * innerWBound) && i <= (width * outerWBound)
      if(width % i == 0){
        wOptions.push(i);
      }
    }
    for(let i = 1; i <= height; i++){
      if(height % i == 0){
        hOptions.push(i);
      }
    }
    let newDimensions = [];
    let newW = wOptions[int(random(wOptions.length))];
    let newH = hOptions[int(random(hOptions.length))]; 
    newDimensions[0] = newW;
    newDimensions[1] = newH;
        
    return newDimensions;
}

function polygon(x, y, radius, npoints) {
 console.log(x + '  ' + y + '  ' + radius + '  ' + npoints);
  let angle = TWO_PI / npoints;
  beginShape();
  for (let a = 0; a < TWO_PI; a += angle) {
    let sx = x + cos(a) * radius;
    let sy = y + sin(a) * radius;
    vertex(sx, sy);
  }
  endShape(CLOSE);
}

function star(x, y, radius1, radius2, npoints) {
  let angle = TWO_PI / npoints;
  let halfAngle = angle / 2.0;
  beginShape();
  for (let a = 0; a < TWO_PI; a += angle) {
    let sx = x + cos(a) * radius2;
    let sy = y + sin(a) * radius2;
    vertex(sx, sy);
    sx = x + cos(a + halfAngle) * radius1;
    sy = y + sin(a + halfAngle) * radius1;
    vertex(sx, sy);
  }
  endShape(CLOSE);
}

function drawTiledTris(cells, H, W){
    triangle(cells[0], cells[1], cells[0] + W/2, cells[1] + H/2, cells[0], cells[1] + H);
    fill(palette.colors[int(random(0,palette.colors.length))]);
    triangle(cells[0] + W, cells[1], cells[0] + W/2, cells[1] + H/2, cells[0], cells[1]);
    fill(palette.colors[int(random(0,palette.colors.length))]);
    triangle(cells[0] + W, cells[1] + H, cells[0] + W/2, cells[1] + H/2, cells[0] + W, cells[1]);
    fill(palette.colors[int(random(0,palette.colors.length))]);
    triangle(cells[0], cells[1] + H, cells[0] + W/2, cells[1] + H/2, cells[0] + W, cells[1] + H);
}

function superEllipse(a, b, n){
    
    
  beginShape();
  for (let angle = 0; angle < TWO_PI; angle += 0.1) {
    // Simple ellipse
    // let x = r * cos(angle);
    // let y = r * sin(angle);

    // Superellipse
    let na = 2 / n;
    let x = pow(abs(cos(angle)), na) * a * sgn(cos(angle));
    let y = pow(abs(sin(angle)), na) * b * sgn(sin(angle));
    vertex(x, y);
  }
  endShape(CLOSE);
}

function sgn(val) {
  if (val == 0) {
    return 0;
  }
  return val / abs(val);
}


































































//var newCanvas = document.getElementById("mycanvas");  // by type
//var img    = newCanvas.toDataURL("iteration/png");
//document.write('<img src="'+img+'"/>');



/*





  beginShape();
  vertex(sx, sy);
  endShape(CLOSE);




// ELLIPSE TARGET
public PShape drawTarget(float xloc, float yloc, int size, int numSteps) {
  PShape target = createShape(GROUP);
  float grayvalues = 255/numSteps;
  float steps = size/numSteps;
  for (int i = 0; i < numSteps; i++) {
    //fill(245, i*grayvalues*.12);
    //noStroke();
    stroke(125);
    PShape ellipse = createShape(ELLIPSE, xloc, yloc, size - i*steps, size - i*steps);
    target.addChild(ellipse);                                                              //  <<<<<<<<  instead of arrays below??
  }
  noFill();
  return target;
}

// POLY TARGET
public PShape[] drawPolyTarget(float xloc, float yloc, int size, int polySides, int numSteps, color[] colors) {
  float alphaValues = 255/numSteps;
  float steps = size/numSteps;
  int strokePicker = 2;
  PShape[] polyTarget = new PShape[numSteps];
  for (int i = 0; i < numSteps; i++) {
    
    stroke(colors[strokePicker]);                        // tying to color picker really** limits qty of layers to 10
    fill(245, i * alphaValues * .17);    //  fill transfered ??? to shape ?
    PShape poly = drawPolygon(xloc, yloc, size - i*steps, polySides, 12);                                              // <<<<<<<   re implement randoms   not  12
    polyTarget[i] = poly;
    strokePicker += 1;                                // get the color of this square < if same as strokePicker   strokePicker +=1
  }
  noFill();
  return polyTarget;
}

// Draws polygons with variables sides  
public PShape drawPolygon(float x, float y, float radius, int npoints, int strokeWeight) {
  float angle = TWO_PI / npoints;
  PShape polygon = createShape();
  
  polygon.beginShape();  
  polygon.strokeWeight(strokeWeight);                                  // stroke as a % of  H / W           Smaller size in cell
  
  for (float a = 0; a < TWO_PI; a += angle) {
    float sx = x + cos(a) * radius;
    float sy = y + sin(a) * radius;
    polygon.vertex(sx, sy);
  }
  polygon.endShape(CLOSE);
  return polygon;
}

// RADIALS
public PShape drawRadial(float diameter, int divisor, int angle, int x, int y, color[] colors) {
  
  float lastAngle = 0;
  int index = int(random(0, colors.length));
  Boolean check = true;
  int step = 3;
  PShape radial = createShape();
  PShape radialGroup = createShape(GROUP);
  
  for (int i = 0; i < divisor; i++) {
    if (index + step < colors.length && check == true) {
      index = index + step;
      check = true;
    } else if (index - step >= 0) {
      index = index - step;
      if (index - step >= 0) {
        check = false;
      } else {
        check = true;
      }
    }
    color radialColor = colors[index];
    fill(radialColor, 50);
    radial = createShape(ARC, x, y, diameter, diameter, lastAngle, lastAngle + radians(angle));
    radialGroup.addChild(radial);
    lastAngle += radians(angle);
  }
  noFill();
  return radialGroup;
} 

// Returns a list of angle / divisor pairs - constrained to usable values 
IntList[] radialOptions(int innerBound, int outerBound) { 

  IntList[] radials = new IntList[2];
  IntList angles = new IntList();
  IntList divisors = new IntList();

  for (int divisor = innerBound; divisor <= outerBound; divisor++) {
    if (360 % divisor == 0) {
      divisors.append(divisor);
      int angle = 360 / divisor;
      angles.append(angle);
    } 
    radials[0] = divisors;
    radials[1] = angles;
  }
  return radials;
}




// ROSE
public PShape drawRose( int locX, int locY, float d, float n, int radius, color[] colors) {
  
  float k = n / d;
  translate(locX, locY);
  
  PShape rose = createShape();
  rose.beginShape();
  
  int paletteLocation = int(random(4,colors.length - 1));
         
  color newFill = colors[paletteLocation];

  
  //rose.stroke(colors[int(random(6,colors.length))]);
  rose.stroke(colors[colors.length-1]);
  rose.noFill();
  //rose.fill(newFill);
  rose.strokeWeight(radius/15);
  
  for (float a = 0; a < TWO_PI * d; a += 0.02) {
    float r = radius * cos(k * a);
    float x = r * cos(a);
    float y = r * sin(a);
    rose.vertex(x, y);
  }
  rose.endShape(CLOSE);
  return rose;
}

public int[] randomRose(){
  int[] roseOptions = new int[2];
  
  do {
    roseOptions[0] = int(random(1,10));
    roseOptions[1] = int((random(1,8)));
  } while (roseOptions[0]  == roseOptions[1] || (roseOptions[0] == 3 && roseOptions[1]  == 1)  || (roseOptions[0] == 6 && roseOptions[1]  == 2)  || (roseOptions[0] == 9 && roseOptions[1]  == 3)) ;
  
  return roseOptions;
}












void draw() {
  float k = n / d;
  background(51);
  translate(width / 2, height / 2);

  beginShape();
  stroke(255);
  noFill();
  strokeWeight(1);
  for (float a = 0; a < TWO_PI * d; a += 0.02) {
    float r = 200 * cos(k * a);
    float x = r * cos(a);
    float y = r * sin(a);
    vertex(x, y);
  }
  endShape(CLOSE);









public PShape drawSuperTarget(int xLoc, int yLoc,  color[] colors, int numSteps, float a, float b, float n) {
  
  strokeWeight(10);  //  a or b %
  translate(xLoc, yLoc);
  PShape superTarget = createShape(GROUP);

  for (int i = 0; i < numSteps; i++) {
    
    PShape superShape = createShape();  
      
    superShape.beginShape();
    superShape.stroke(colors[colors.length-1]);
    superShape.fill(colors[int(random(1,colors.length-3))]);    
    for (float angle = 0; angle < TWO_PI; angle += 0.1) {
      float na = 2 / n;
      float x = pow(abs(cos(angle)), na) * a * sgn(cos(angle));
      float y = pow(abs(sin(angle)), na) * b * sgn(sin(angle));
      superShape.vertex(x, y);
    }
    a *= .5;
    b *= .5;
    superShape.endShape(CLOSE);
    superTarget.addChild(superShape);
  }
  return superTarget;
}

float sgn(float val) {
  if (val == 0) {
    return 0;
  }
  return val / abs(val);
}



*/












































